//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Tactical Command
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibChal"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libChal_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_USER = 1;
const int gv_pLAYER_COMPUTER1 = 2;
const int gv_pLAYER_BOARD = 6;
const int gv_readyButton = 1;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
region gv_playableArea;
unitgroup gv_playerUnits;
unitgroup gv_playerUnitsRound1;
unitgroup gv_playerUnitsRound2;
unitgroup gv_playerUnitsRound3;
unitgroup gv_playerUnitsArea1;
unitgroup gv_playerUnitsArea2;
unitgroup gv_playerUnitsArea3;
unitgroup gv_repulserFields;
unitgroup gv_attackers;
unit gv_supplyDepot01;
unit gv_supplyDepot02;
unit gv_supplyDepot03;
bool gv_supplyDepotDead;
bool gv_ready;
int gv_roundCount;
bool gv_allRoundsCompleted;
text gv_ratingText;
int gv_winningScoreSilver;
int gv_winningScoreGold;
revealer gv_revealer;
int gv_lostUnitsRound1;
int gv_lostUnitsRound2;
int gv_lostUnitsRound3;
int gv_lostUnitsTotalPrevious;
int gv_lostUnitsRound1Best;
int gv_lostUnitsRound2Best;
int gv_lostUnitsRound3Best;
unit gv_shield01;
unit gv_shield02;
unit gv_shield03;
unitgroup gv_enemyAttackersA;
unitgroup gv_enemyAttackersB;
unitgroup gv_enemyAttackersC;
int gv_retryCountRound01;
int gv_retryCountRound02;
int gv_retryCountRound03;
text gv_ratingTextBronze;
text gv_ratingTextSilver;
text gv_ratingTextGold;
int gv_buildingPing01;
int gv_buildingPing02;
int gv_buildingPing03;
int gv_enemyPing01;
int gv_enemyPing02;
int gv_enemyPing03;
int gv_board;
timer gv_textTimer;
bool gv_cheatUsed;
int gv_objectiveSurvive01;
int gv_objectiveSurvive02;
int gv_objectiveSurvive03;
bool gv_introCinematicCompleted;

void InitGlobals () {
    gv_playerUnits = UnitGroupEmpty();
    gv_playerUnitsRound1 = UnitGroupEmpty();
    gv_playerUnitsRound2 = UnitGroupEmpty();
    gv_playerUnitsRound3 = UnitGroupEmpty();
    gv_playerUnitsArea1 = UnitGroupEmpty();
    gv_playerUnitsArea2 = UnitGroupEmpty();
    gv_playerUnitsArea3 = UnitGroupEmpty();
    gv_repulserFields = UnitGroupEmpty();
    gv_attackers = UnitGroupEmpty();
    gv_winningScoreSilver = 20;
    gv_winningScoreGold = 10;
    gv_enemyAttackersA = UnitGroupEmpty();
    gv_enemyAttackersB = UnitGroupEmpty();
    gv_enemyAttackersC = UnitGroupEmpty();
    gv_ratingTextBronze = StringExternal("Param/Value/DD3D0EA1");
    gv_ratingTextSilver = StringExternal("Param/Value/17CE887C");
    gv_ratingTextGold = StringExternal("Param/Value/74A6BA7B");
    gv_buildingPing01 = c_invalidPingId;
    gv_buildingPing02 = c_invalidPingId;
    gv_buildingPing03 = c_invalidPingId;
    gv_enemyPing01 = c_invalidPingId;
    gv_enemyPing02 = c_invalidPingId;
    gv_enemyPing03 = c_invalidPingId;
    gv_board = c_boardNone;
    gv_textTimer = TimerCreate();
    gv_objectiveSurvive01 = c_invalidObjectiveId;
    gv_objectiveSurvive02 = c_invalidObjectiveId;
    gv_objectiveSurvive03 = c_invalidObjectiveId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction ();
void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2);
void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location);
void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup);
void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location);
void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location);
void gf_TextTag (text lp_roundText);
void gf_Achievements ();
int gf_TotalScore ();
void gf_SaveScores ();
void gf_UpdateScoreUI (int lp_score);
void gf_UNUSEDTEXTSTRINGS ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Players;
trigger gt_Init01aTechnology;
trigger gt_Init02Units;
trigger gt_Init03Music;
trigger gt_Init04Environment;
trigger gt_Init05Hints;
trigger gt_Init06MapSettings;
trigger gt_ButtonChosenLeaveGame;
trigger gt_ButtonChosenRetryRound1;
trigger gt_ButtonChosenRetryRound2;
trigger gt_ButtonChosenRetryRound3;
trigger gt_DialogScoreShow;
trigger gt_ResetPlayField;
trigger gt_SpawnRound1;
trigger gt_SpawnRound2;
trigger gt_SpawnRound3;
trigger gt_PlayerUnitsRound1;
trigger gt_PlayerUnitsRound2;
trigger gt_PlayerUnitsRound3;
trigger gt_StartAI;
trigger gt_WarnPlayerAttack;
trigger gt_SupplyDepotsInvulnerable;
trigger gt_SupplyDepotsVulnerable;
trigger gt_UnitDies;
trigger gt_MakeRound1ScoreDialog;
trigger gt_WaittoStartRound2;
trigger gt_MakeRound2ScoreDialog;
trigger gt_WaittoStartRound3;
trigger gt_MakeRound3ScoreDialog;
trigger gt_WaittogotoVictory;
trigger gt_WaitthengobacktoVictoryScreen;
trigger gt_CheckforCheating;
trigger gt_AddReadyButtonQ;
trigger gt_ReadyPressed;
trigger gt_RemoveText;
trigger gt_ObjectiveSurviveCreate;
trigger gt_ObjectiveSurviveUpdate;
trigger gt_ObjectiveSurviveProtect;
trigger gt_ObjectiveSurviveDiscoverQ;
trigger gt_ObjectiveSurviveComplete;
trigger gt_ObjectiveSurviveFailed;
trigger gt_FinalRound1;
trigger gt_FinalRound2;
trigger gt_FinalRound3;
trigger gt_FinishVictory;
trigger gt_FinishDefeatSupplyDepotBeforeVictory;
trigger gt_FinishDefeatSupplyDepotAfterVictory;
trigger gt_FinishDefeatUnitsDead;
trigger gt_TipCountersQ;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroSupplyDepotCameras;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ClearAlertsFunction () {
    // Implementation
    Wait(3.0, c_timeGame);
    UIAlertClear(gv_pLAYER_USER);
}

void gf_UnpauseShowEnemies (unitgroup lp_showGroup, unitgroup lp_hideGroup1, unitgroup lp_hideGroup2) {
    // Implementation
    UnitGroupLoopBegin(lp_showGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_hideGroup2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
}

void gf_SpawnEnemyUnitsForArea1 (int lp_qty, string lp_type, region lp_location) {
    int autoA41563FB_n;
    int autoA41563FB_i;

    // Implementation
    autoA41563FB_n = lp_qty;
    for (autoA41563FB_i = 1; autoA41563FB_i <= autoA41563FB_n; autoA41563FB_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersA, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
    }
}

void gf_SpawnEnemyUnitsForArea2 (int lp_qty, string lp_type, region lp_location) {
    int autoC6A5ED6F_n;
    int autoC6A5ED6F_i;

    // Implementation
    autoC6A5ED6F_n = lp_qty;
    for (autoC6A5ED6F_i = 1; autoC6A5ED6F_i <= autoC6A5ED6F_n; autoC6A5ED6F_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersB, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
    }
}

void gf_SpawnEnemyUnitsForArea3 (int lp_qty, string lp_type, region lp_location) {
    int auto25CDAD30_n;
    int auto25CDAD30_i;

    // Implementation
    auto25CDAD30_n = lp_qty;
    for (auto25CDAD30_i = 1; auto25CDAD30_i <= auto25CDAD30_n; auto25CDAD30_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_COMPUTER1, RegionGetCenter(lp_location));
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitGroupAdd(gv_attackers, UnitLastCreated());
        UnitGroupAdd(gv_enemyAttackersC, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
    }
}

void gf_HidePauseGetReadyPlayer (region lp_whichArea, unitgroup lp_showGroup) {
    // Implementation
    UnitClearSelection(gv_pLAYER_USER);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lp_showGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "Untargetable", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "DamageTakenNone", 1);
    }
    UnitGroupLoopEnd();
    Wait(0.0625, c_timeGame);
    UnitGroupLoopBegin(lp_showGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSelect(UnitGroupLoopCurrent(), gv_pLAYER_USER, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_repulserFields, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_attackers, RegionEntireMap(), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "Untargetable", gv_pLAYER_COMPUTER1, 1);
        UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "DamageTakenNone", gv_pLAYER_COMPUTER1, 1);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
    }
    UnitGroupLoopEnd();
}

void gf_SpawnPlayerUnitsForRound1 (int lp_qty, string lp_type, region lp_location) {
    int autoF4412964_n;
    int autoF4412964_i;

    // Implementation
    autoF4412964_n = lp_qty;
    for (autoF4412964_i = 1; autoF4412964_i <= autoF4412964_n; autoF4412964_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound1, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_SpawnPlayerUnitsForRound2 (int lp_qty, string lp_type, region lp_location) {
    int auto43BAE4EB_n;
    int auto43BAE4EB_i;

    // Implementation
    auto43BAE4EB_n = lp_qty;
    for (auto43BAE4EB_i = 1; auto43BAE4EB_i <= auto43BAE4EB_n; auto43BAE4EB_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound2, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_SpawnPlayerUnitsForRound3 (int lp_qty, string lp_type, region lp_location) {
    int autoE8761E63_n;
    int autoE8761E63_i;

    // Implementation
    autoE8761E63_n = lp_qty;
    for (autoE8761E63_i = 1; autoE8761E63_i <= autoE8761E63_n; autoE8761E63_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, lp_type, 0, gv_pLAYER_USER, RegionGetCenter(lp_location));
        UnitGroupAdd(gv_playerUnits, UnitLastCreated());
        UnitGroupAdd(gv_playerUnitsRound3, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Untargetable", gv_pLAYER_USER, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DamageTakenNone", gv_pLAYER_USER, 1);
    }
}

void gf_TextTag (text lp_roundText) {
    // Implementation
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    TextTagCreate(lp_roundText, 60, CameraGetTarget(gv_pLAYER_USER), 2.0, true, false, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 94.90, 94.90));
    TextTagSetBackgroundBorderSize(TextTagLastCreated(), 2.0, 2.0);
    Wait(3.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
}

void gf_Achievements () {
    // Implementation
    gv_ratingText = (StringExternal("Param/Value/7397B4E5") + gv_ratingTextBronze);
    AchievementAward(gv_pLAYER_USER, "Challenge_TerranCombat_Basic");
    if ((gf_TotalScore() <= gv_winningScoreSilver)) {
        gv_ratingText = (StringExternal("Param/Value/EFC10134") + gv_ratingTextSilver);
        AchievementAward(gv_pLAYER_USER, "Challenge_TerranCombat_Mastery");
    }
    else {
    }
    if ((gf_TotalScore() <= gv_winningScoreGold)) {
        gv_ratingText = (StringExternal("Param/Value/3A8A2CBE") + gv_ratingTextGold);
        AchievementAward(gv_pLAYER_USER, "Challenge_TerranCombat_Dominance");
    }
    else {
    }
}

int gf_TotalScore () {
    // Implementation
    return (gv_lostUnitsRound1 + gv_lostUnitsRound2 + gv_lostUnitsRound3);
}

void gf_SaveScores () {
    // Implementation
    if ((gv_cheatUsed == false)) {
        if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) <= -1)) {
            gf_UpdateScoreUI(gf_TotalScore());
            libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
        }
        else {
            if ((libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()) >= gf_TotalScore())) {
                gf_UpdateScoreUI(gf_TotalScore());
                libChal_gf_SaveChallengeScoreToBank(libChal_gf_CurrentChallengeType(), gf_TotalScore());
            }
            else {
                gf_UpdateScoreUI(libChal_gf_ChallengeScoreFromBank(libChal_gf_CurrentChallengeType()));
            }
        }
    }
    else {
    }
}

void gf_UpdateScoreUI (int lp_score) {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/29078193") + StringExternal("Param/Value/55B7ADF3") + IntToText(lp_score) + StringExternal("Param/Value/AB0CE920")));
}

void gf_UNUSEDTEXTSTRINGS () {
    // Implementation
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/9685FC2F") + StringExternal("Param/Value/2E64AD8F") + IntToText(0) + StringExternal("Param/Value/C3915FF6")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/FBBAB1E6") + StringExternal("Param/Value/15B28B1A") + IntToText(0) + StringExternal("Param/Value/AEF1754D")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/9B308DCE") + StringExternal("Param/Value/888F294C") + IntToText(0) + StringExternal("Param/Value/59839E98")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/020C7720") + StringExternal("Param/Value/BEE37DFC") + IntToText(0) + StringExternal("Param/Value/199B4D30")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/988E4C17") + StringExternal("Param/Value/7D787FDC") + IntToText(0) + StringExternal("Param/Value/56F163A2")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/2ADCAB4F") + StringExternal("Param/Value/4D414E80") + IntToText(0) + StringExternal("Param/Value/2D0CD1AA")));
    UISetChallengeScoreText(PlayerGroupAll(), "TerranCombat", (StringExternal("Param/Value/A1C4AFA8") + StringExternal("Param/Value/FC9ED8F5") + IntToText(0) + StringExternal("Param/Value/12C84BED")));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetChallengeMode(PlayerGroupAll(), true);
    libChal_gf_LoadChallengeData(libChal_ge_ChallengeType_TerranCombat);
    GameCheatAllow(c_gameCheatVictory, false);
    TriggerExecute(gt_Init01Players, true, false);
    TriggerExecute(gt_Init02Units, true, false);
    TriggerExecute(gt_Init03Music, true, false);
    TriggerExecute(gt_Init04Environment, true, false);
    TriggerExecute(gt_Init05Hints, true, false);
    TriggerExecute(gt_Init06MapSettings, true, false);
    TriggerExecute(gt_IntroQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init01Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Init01aTechnology, true, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_BOARD, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_COMPUTER1, gv_pLAYER_BOARD, libNtve_ge_AllianceSetting_Ally);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Players_Init () {
    gt_Init01Players = TriggerCreate("gt_Init01Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01a Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01aTechnology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRestrictionsEnable(gv_pLAYER_USER, true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("Stimpack", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("SiegeMode", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("Unsiege", 0), true);
    TechTreeBehaviorAllow(gv_pLAYER_USER, "TerranBuildingBurnDown", false);
    TechTreeUpgradeAddLevel(gv_pLAYER_USER, "Stimpack", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_USER, "ShieldWall", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_USER, "SiegeTech", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_USER, "PersonalCloaking", 1);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01aTechnology_Init () {
    gt_Init01aTechnology = TriggerCreate("gt_Init01aTechnology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init02Units_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Units_Init () {
    gt_Init02Units = TriggerCreate("gt_Init02Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Music
//--------------------------------------------------------------------------------------------------
bool gt_Init03Music_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Music_Init () {
    gt_Init03Music = TriggerCreate("gt_Init03Music_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init04Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playableArea = RegionPlayableMap();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(13)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9090D1A4"));
    gv_buildingPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(14)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/110EC0F6"));
    gv_buildingPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.78, 26.27, 4.31, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A21E8C29"));
    gv_buildingPing03 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(2)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/461FEB37"));
    gv_enemyPing01 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(4)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CA3E2F48"));
    gv_enemyPing02 = PingLastCreated();
    PingCreate(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/68BA0758"));
    gv_enemyPing03 = PingLastCreated();
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    CreepModify(RegionGetCenter(RegionFromId(11)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(12)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(16)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(19)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(45)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(47)), 10.0, true, true);
    CreepModify(RegionGetCenter(RegionFromId(48)), 10.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04Environment_Init () {
    gt_Init04Environment = TriggerCreate("gt_Init04Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Hints
//--------------------------------------------------------------------------------------------------
bool gt_Init05Hints_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/F5892F7E"), StringExternal("Param/Value/BD2727FF"), "Assets\\Textures\\btn-unit-zerg-mantalisk.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/64D71F03"), StringExternal("Param/Value/0B5A7FB6"), "Assets\\Textures\\btn-unit-zerg-roach.dds");
    HelpPanelAddHint(PlayerGroupAll(), StringExternal("Param/Value/5708127D"), StringExternal("Param/Value/060071E1"), "Assets\\Textures\\btn-unit-zerg-zergling.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Hints_Init () {
    gt_Init05Hints = TriggerCreate("gt_Init05Hints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Map Settings
//--------------------------------------------------------------------------------------------------
bool gt_Init06MapSettings_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitHelpDefault(gv_pLAYER_USER, false);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marine", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Marauder", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Ghost", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Hellion", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingAssault", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "VikingFighter", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTankSieged", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "SiegeTank", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Medivac", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Thor", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Zergling", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Baneling", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Roach", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "BroodLord", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Mutalisk", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Hydralisk", true);
    TechTreeUnitHelp(gv_pLAYER_USER, "Ultralisk", true);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06MapSettings_Init () {
    gt_Init06MapSettings = TriggerCreate("gt_Init06MapSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Leave Game
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenLeaveGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(gv_pLAYER_USER, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenLeaveGame_Init () {
    gt_ButtonChosenLeaveGame = TriggerCreate("gt_ButtonChosenLeaveGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 1
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound1, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound1_Init () {
    gt_ButtonChosenRetryRound1 = TriggerCreate("gt_ButtonChosenRetryRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 2
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound2, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound2_Init () {
    gt_ButtonChosenRetryRound2 = TriggerCreate("gt_ButtonChosenRetryRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Chosen Retry Round 3
//--------------------------------------------------------------------------------------------------
bool gt_ButtonChosenRetryRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_SpawnRound3, true, false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonChosenRetryRound3_Init () {
    gt_ButtonChosenRetryRound3 = TriggerCreate("gt_ButtonChosenRetryRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Score Show
//--------------------------------------------------------------------------------------------------
bool gt_DialogScoreShow_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerQueuePause(false);
    ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    RegionPlayableMapSet(RegionPlayableMap());
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_playerUnits, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupRemove(gv_attackers, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((gv_allRoundsCompleted == true)) {
        libChal_gf_CreateChallengeVictoryPanel(StringExternal("Param/Value/98A4EF66"), gv_ratingText, StringExternal("Param/Value/F88650F1"), (StringExternal("Param/Value/B20EC050") + IntToText(gf_TotalScore())), gt_ButtonChosenLeaveGame, null);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/8CA85ED1") + IntToText(gv_lostUnitsRound1)), gt_SpawnRound1);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/647D15C4") + IntToText(gv_lostUnitsRound2)), gt_SpawnRound2);
        libChal_gf_AddWaveToChallengeVictoryPanel((StringExternal("Param/Value/4BE881CF") + IntToText(gv_lostUnitsRound3)), gt_SpawnRound3);
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_TerranCombat_Basic");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_TerranCombat_Mastery");
        libChal_gf_AddAchievementToChallengeVictoryPanel("Challenge_TerranCombat_Dominance");
        libChal_gf_ShowHideChallengeVictoryPanel(true);
    }
    else {
        libChal_gf_CreateChallengeDefeatPanel(StringExternal("Param/Value/74690A49"), StringExternal("Param/Value/A55B15A3"), gt_ButtonChosenLeaveGame, null);
        if ((gv_lostUnitsRound1 >= 0) && (gv_roundCount >= 1)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/EC2B095A") + IntToText(gv_lostUnitsRound1)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound1);
        }
        else {
            if ((gv_roundCount == 0) && (gv_supplyDepotDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/CF928B65")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound1);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/FD17D10E")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound1);
            }
        }
        if ((gv_lostUnitsRound2 >= 0) && (gv_roundCount >= 2)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/F57AC6AA") + IntToText(gv_lostUnitsRound2)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound2);
        }
        else {
            if ((gv_roundCount == 1) && (gv_supplyDepotDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/E2E62A6A")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound2);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/8E3A6314")), libChal_ge_CHL_DefeatPanelWaveResult_HaventTried, gt_ButtonChosenRetryRound2);
            }
        }
        if ((gv_lostUnitsRound3 >= 0) && (gv_roundCount >= 3)) {
            libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/B49F75F4") + IntToText(gv_lostUnitsRound3)), libChal_ge_CHL_DefeatPanelWaveResult_Survived, gt_ButtonChosenRetryRound3);
        }
        else {
            if ((gv_roundCount == 2) && (gv_supplyDepotDead == true)) {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/00C870BF")), libChal_ge_CHL_DefeatPanelWaveResult_Failed, gt_ButtonChosenRetryRound3);
            }
            else {
                libChal_gf_AddWaveToChallengeDefeatPanel((StringExternal("Param/Value/82FBC6CF")), libChal_ge_CHL_DefeatPanelWaveResult_HaventTried, gt_ButtonChosenRetryRound3);
            }
        }
        libChal_gf_ShowHideChallengeDefeatPanel(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogScoreShow_Init () {
    gt_DialogScoreShow = TriggerCreate("gt_DialogScoreShow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Play Field
//--------------------------------------------------------------------------------------------------
bool gt_ResetPlayField_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(gv_playableArea);
    UnitRemove(gv_shield01);
    UnitRemove(gv_shield02);
    UnitRemove(gv_shield03);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField10", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(20)));
    gv_shield01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField10", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(29)));
    gv_shield02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RepulserField10", 0, gv_pLAYER_BOARD, RegionGetCenter(RegionFromId(37)));
    gv_shield03 = UnitLastCreated();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_BOARD, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_repulserFields, UnitGroupLoopCurrent());
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(13)));
    gv_supplyDepot01 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(14)));
    gv_supplyDepot02 = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SupplyDepot", 0, gv_pLAYER_USER, RegionGetCenter(RegionFromId(15)));
    gv_supplyDepot03 = UnitLastCreated();
    gv_supplyDepotDead = false;
    if ((gv_allRoundsCompleted == false)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
    }
    else {
        TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetPlayField_Init () {
    gt_ResetPlayField = TriggerCreate("gt_ResetPlayField_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_roundCount = 0;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound1Best = gv_lostUnitsRound1;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound1 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/C7FD744E") + IntToText(gv_roundCount) + StringExternal("Param/Value/10A62150")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
    }
    else {
    }
    gv_lostUnitsRound1 = 0;
    BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/F14C4A6D") + StringExternal("Param/Value/F6045B84") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/347EC643")));
    BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/5A34E487") + StringExternal("Param/Value/54B7E35C") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/2CDF2CFE")));
    BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/048D4E31") + StringExternal("Param/Value/9550C7D6") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/4967CFEE")));
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/98203B66") + StringExternal("Param/Value/F2F366E8") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/0DE2D362")));
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerExecute(gt_ObjectiveSurviveDiscoverQ, true, false);
    TriggerExecute(gt_TipCountersQ, true, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringToText(""), null, PointFromId(1));
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_PlayerUnitsRound1, true, false);
    gf_SpawnEnemyUnitsForArea1(39, "Zergling", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(8, "Baneling", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(12, "Mutalisk", RegionFromId(5));
    TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    gf_TextTag(StringExternal("Param/Value/5258072C"));
    if ((gv_retryCountRound01 == 2)) {
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSupplyDepotBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, true);
    }
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(79), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SupplyDepotsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/B2FE915C"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(74), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5C69D3C8"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    UnitGroupIssueOrder(gv_enemyAttackersB, OrderSetAutoCast(AbilityCommand("SapStructure", 0), true), c_orderQueueReplace);
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(73), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/5D638B92"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound1_Init () {
    gt_SpawnRound1 = TriggerCreate("gt_SpawnRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_roundCount = 1;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound2Best = gv_lostUnitsRound2;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound2 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/A341C618") + IntToText(gv_roundCount) + StringExternal("Param/Value/CB741578")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/B01B9495") + StringExternal("Param/Value/15E0E538") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/743ECC0A")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/87E2C61A") + StringExternal("Param/Value/463417F5") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/5A728B51")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/0559F06B") + StringExternal("Param/Value/370305A7") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/0F20A46A")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/4B0FB35F") + StringExternal("Param/Value/0E9208D2") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/34FE0DC3")));
    }
    else {
    }
    gv_lostUnitsRound2 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound3);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringToText(""), null, PointFromId(1));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
    TriggerExecute(gt_PlayerUnitsRound2, true, false);
    gf_SpawnEnemyUnitsForArea1(9, "Roach", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(1, "Ultralisk", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(17, "Hydralisk", RegionFromId(5));
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound02 == 2)) {
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSupplyDepotBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/4672CE67"));
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(79), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SupplyDepotsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/6478EE9B"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(74), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/071D4669"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(73), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/A826AE89"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound2_Init () {
    gt_SpawnRound2 = TriggerCreate("gt_SpawnRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Round 3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeVictoryPanel(false);
    libChal_gf_ShowHideChallengeDefeatPanel(false);
    gv_roundCount = 2;
    TriggerExecute(gt_ResetPlayField, true, false);
    if ((gv_allRoundsCompleted == true)) {
        gv_lostUnitsRound3Best = gv_lostUnitsRound3;
        gv_lostUnitsTotalPrevious = gf_TotalScore();
        gv_lostUnitsRound3 = 0;
        ObjectiveShow(gv_objectiveSurvive01, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive02, PlayerGroupAll(), true);
        ObjectiveShow(gv_objectiveSurvive03, PlayerGroupAll(), true);
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateActive);
        UnitPauseAll(false);
        ObjectiveSetName(gv_objectiveSurvive01, (StringExternal("Param/Value/9E6E0717") + IntToText(gv_roundCount) + StringExternal("Param/Value/ED0B695F")));
        if ((gf_TotalScore() > gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
        }
        else {
        }
        if ((gf_TotalScore() > gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
        }
        else {
        }
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/30CBAF3F") + StringExternal("Param/Value/835B7A1B") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/87394305")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/E4A93D35") + StringExternal("Param/Value/0314EDF2") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/CDCC1249")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/4033F49E") + StringExternal("Param/Value/80B3C8A6") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/B6703283")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/D3091908") + StringExternal("Param/Value/A09EF337") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/F044D694")));
    }
    else {
    }
    gv_lostUnitsRound3 = 0;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    RegionPlayableMapSet(gv_playableArea);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 0.0, -1, 10, true);
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringToText(""), null, PointFromId(1));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationDefault);
    UnitGroupLoopBegin(gv_playerUnitsRound2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_attackers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_repulserFields);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
    TriggerExecute(gt_PlayerUnitsRound3, true, false);
    gf_SpawnEnemyUnitsForArea1(22, "Zergling", RegionFromId(6));
    gf_SpawnEnemyUnitsForArea1(5, "BroodLord", RegionFromId(9));
    gf_SpawnEnemyUnitsForArea2(12, "Hydralisk", RegionFromId(7));
    gf_SpawnEnemyUnitsForArea2(9, "Roach", RegionFromId(8));
    gf_SpawnEnemyUnitsForArea3(17, "Mutalisk", RegionFromId(10));
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    if ((gv_retryCountRound03 == 2)) {
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
        HelpPanelDisplayPage(PlayerGroupAll(), c_helpPanelPageTips);
    }
    else {
    }
    TriggerEnable(gt_FinishDefeatUnitsDead, true);
    if ((gv_allRoundsCompleted == false)) {
        TriggerEnable(gt_FinishDefeatSupplyDepotBeforeVictory, true);
    }
    else {
        TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, true);
    }
    gf_TextTag(StringExternal("Param/Value/BF8DFE1C"));
    TriggerEnable(gt_ObjectiveSurviveProtect, true);
    TriggerExecute(gt_AddReadyButtonQ, true, false);
    while (!((gv_ready == true))) {
        Wait(0.5, c_timeGame);
    }
    gv_ready = false;
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TechTreeAbilityAllow(gv_pLAYER_USER, AbilityCommand("MedivacTransport", 0), true);
    PingSetVisible(gv_buildingPing01, false);
    PingSetVisible(gv_buildingPing02, false);
    PingSetVisible(gv_buildingPing03, false);
    PingSetVisible(gv_enemyPing01, false);
    PingSetVisible(gv_enemyPing02, false);
    PingSetVisible(gv_enemyPing03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(21));
    CameraPan(gv_pLAYER_USER, PointFromId(79), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(50), gv_playerUnitsArea1);
    TriggerExecute(gt_SupplyDepotsVulnerable, true, false);
    gf_UnpauseShowEnemies(gv_enemyAttackersA, gv_enemyAttackersB, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield01, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(39), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/0C5EC80B"), null, PointFromId(39));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersA);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersA, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(22));
    CameraPan(gv_pLAYER_USER, PointFromId(74), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(51), gv_playerUnitsArea2);
    gf_UnpauseShowEnemies(gv_enemyAttackersB, gv_enemyAttackersA, gv_enemyAttackersC);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield02, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(4), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/EC196D76"), null, PointFromId(4));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersB);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, true);
    while (!((UnitGroupCount(gv_enemyAttackersB, c_unitCountAlive) == 0))) {
        Wait(0.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    RegionPlayableMapSet(RegionFromId(23));
    CameraPan(gv_pLAYER_USER, PointFromId(73), 0.0, -1, 10, false);
    gf_HidePauseGetReadyPlayer(RegionFromId(49), gv_playerUnitsArea3);
    gf_UnpauseShowEnemies(gv_enemyAttackersC, gv_enemyAttackersA, gv_enemyAttackersB);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_WarnPlayerAttack, true, true);
    libNtve_gf_ShowHideUnit(gv_shield03, false);
    libNtve_gf_SetAlliance(gv_pLAYER_USER, gv_pLAYER_COMPUTER1, libNtve_ge_AllianceSetting_Enemy);
    MinimapPing(PlayerGroupAll(), PointFromId(25), 2.0, Color(100.00, 0.00, 0.00));
    UIAlertPoint("Trigger", gv_pLAYER_USER, StringExternal("Param/Value/D708F524"), null, PointFromId(25));
    gf_ClearAlertsFunction();
    AIAttackWaveUseGroup(gv_pLAYER_COMPUTER1, gv_enemyAttackersC);
    AIAttackWaveSend(gv_pLAYER_COMPUTER1, 3, false);
    TriggerEnable(gt_FinalRound3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRound3_Init () {
    gt_SpawnRound3 = TriggerCreate("gt_SpawnRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 1
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_playerUnitsRound1, c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound1(20, "Marine", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound1(10, "Hellion", RegionFromId(42));
    gf_SpawnPlayerUnitsForRound1(1, "SiegeTank", RegionFromId(43));
    gf_SpawnPlayerUnitsForRound1(1, "Ghost", RegionFromId(58));
    gf_SpawnPlayerUnitsForRound1(2, "Medivac", RegionFromId(60));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound1_Init () {
    gt_PlayerUnitsRound1 = TriggerCreate("gt_PlayerUnitsRound1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 2
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound2(9, "Marine", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound2(9, "Marauder", RegionFromId(42));
    gf_SpawnPlayerUnitsForRound2(6, "SiegeTank", RegionFromId(43));
    gf_SpawnPlayerUnitsForRound2(2, "Medivac", RegionFromId(60));
    gf_SpawnPlayerUnitsForRound2(1, "Ghost", RegionFromId(58));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound2_Init () {
    gt_PlayerUnitsRound2 = TriggerCreate("gt_PlayerUnitsRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Units Round 3
//--------------------------------------------------------------------------------------------------
bool gt_PlayerUnitsRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnPlayerUnitsForRound3(10, "Hellion", RegionFromId(41));
    gf_SpawnPlayerUnitsForRound3(7, "Marauder", RegionFromId(42));
    gf_SpawnPlayerUnitsForRound3(6, "SiegeTank", RegionFromId(43));
    gf_SpawnPlayerUnitsForRound3(5, "Thor", RegionFromId(44));
    gf_SpawnPlayerUnitsForRound3(10, "VikingFighter", RegionFromId(59));
    gf_SpawnPlayerUnitsForRound3(3, "Medivac", RegionFromId(60));
    gf_SpawnPlayerUnitsForRound3(1, "Ghost", RegionFromId(58));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerUnitsRound3_Init () {
    gt_PlayerUnitsRound3 = TriggerCreate("gt_PlayerUnitsRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    AICampaignStart(gv_pLAYER_COMPUTER1);
    AIAttackWaveSetTargetPlayer(gv_pLAYER_COMPUTER1, PlayerGroupSingle(gv_pLAYER_USER));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Warn Player - Attack
//--------------------------------------------------------------------------------------------------
bool gt_WarnPlayerAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_racingStartDIALOG;
    int lv_racingStartTEXT;

    // Variable Initialization
    lv_racingStartDIALOG = c_invalidDialogId;
    lv_racingStartTEXT = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, false);
    lv_racingStartDIALOG = DialogLastCreated();
    DialogSetImageVisible(lv_racingStartDIALOG, false);
    DialogControlCreate(lv_racingStartDIALOG, c_triggerControlTypeLabel);
    lv_racingStartTEXT = DialogControlLastCreated();
    DialogControlSetFullDialog(lv_racingStartTEXT, PlayerGroupAll(), true);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemStyle(lv_racingStartTEXT, "ChallengeReady", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_racingStartTEXT, StringExternal("Param/Value/BE4506F5"), PlayerGroupAll());
    SoundPlay(SoundLink("TUIWarningPing", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    DialogSetVisible(lv_racingStartDIALOG, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WarnPlayerAttack_Init () {
    gt_WarnPlayerAttack = TriggerCreate("gt_WarnPlayerAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Depots Invulnerable
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDepotsInvulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_supplyDepot01, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_supplyDepot02, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_supplyDepot03, c_unitPropLifePercent, 100.0);
    UnitBehaviorAddPlayer(gv_supplyDepot01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_supplyDepot02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_supplyDepot03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_supplyDepot01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_supplyDepot02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorAddPlayer(gv_supplyDepot03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDepotsInvulnerable_Init () {
    gt_SupplyDepotsInvulnerable = TriggerCreate("gt_SupplyDepotsInvulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Depots Vulnerable
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDepotsVulnerable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(gv_supplyDepot01, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_supplyDepot02, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_supplyDepot03, "DamageTakenNone", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_supplyDepot01, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_supplyDepot02, "Untargetable", gv_pLAYER_USER, 1);
    UnitBehaviorRemovePlayer(gv_supplyDepot03, "Untargetable", gv_pLAYER_USER, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDepotsVulnerable_Init () {
    gt_SupplyDepotsVulnerable = TriggerCreate("gt_SupplyDepotsVulnerable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_UnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_USER, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_playerUnitsRound1, EventUnit()) == true)) {
        gv_lostUnitsRound1 += 1;
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/8563874F") + StringExternal("Param/Value/99D85C01") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/6E8B0AB6")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound2, EventUnit()) == true)) {
        gv_lostUnitsRound2 += 1;
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/1D3D8256") + StringExternal("Param/Value/E8991D03") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/BD1D0308")));
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_playerUnitsRound3, EventUnit()) == true)) {
        gv_lostUnitsRound3 += 1;
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/39F2F53F") + StringExternal("Param/Value/F2A236DC") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/F46A04D7")));
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/A9F24048") + StringExternal("Param/Value/B080BD6A") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/A8F3D686")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDies_Init () {
    gt_UnitDies = TriggerCreate("gt_UnitDies_Func");
    TriggerAddEventUnitDied(gt_UnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 1 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound1ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound1 < gv_lostUnitsRound1Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound1 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/F21C1EFB"), StringExternal("Param/Value/C6D42608"), (StringExternal("Param/Value/ED2C5E0C") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/06228FBB"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/1AC6F97D"), StringExternal("Param/Value/2BCA19D9"), (StringExternal("Param/Value/FEBFD215") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/16162A05"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/09927707"), StringExternal("Param/Value/25FE8C90"), (StringExternal("Param/Value/15E03CCE") + IntToText(gv_lostUnitsRound1)), StringExternal("Param/Value/840ACF51"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound1 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/D7700DA2"), StringExternal("Param/Value/FA5E4CC5"), (StringExternal("Param/Value/DD670A69") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/79815E72"), StringExternal("Param/Value/B4641304"), (StringExternal("Param/Value/218BE9D8") + IntToText(gv_lostUnitsRound1)), null, gt_WaittoStartRound2);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound1ScoreDialog_Init () {
    gt_MakeRound1ScoreDialog = TriggerCreate("gt_MakeRound1ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 2
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound2_Init () {
    gt_WaittoStartRound2 = TriggerCreate("gt_WaittoStartRound2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 2 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound2ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound2 < gv_lostUnitsRound2Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound2 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/9AAB53D5"), StringExternal("Param/Value/9EA24A50"), (StringExternal("Param/Value/B9B4C780") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/23FD1E3E"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/86D21C6A"), StringExternal("Param/Value/2AA713E0"), (StringExternal("Param/Value/0E7A9D59") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/65C769BE"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/F1F61654"), StringExternal("Param/Value/584FCA38"), (StringExternal("Param/Value/0C6A1877") + IntToText(gv_lostUnitsRound2)), StringExternal("Param/Value/09C11BE6"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        gf_Achievements();
    }
    else {
        if ((gv_lostUnitsRound2 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/2F325029"), StringExternal("Param/Value/466773ED"), (StringExternal("Param/Value/A4A055E2") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/8F0AC9D3"), StringExternal("Param/Value/46B7FA23"), (StringExternal("Param/Value/B9FDA8D0") + IntToText(gv_lostUnitsRound2)), null, gt_WaittoStartRound3);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound2ScoreDialog_Init () {
    gt_MakeRound2ScoreDialog = TriggerCreate("gt_MakeRound2ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to Start Round 3
//--------------------------------------------------------------------------------------------------
bool gt_WaittoStartRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_SpawnRound3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittoStartRound3_Init () {
    gt_WaittoStartRound3 = TriggerCreate("gt_WaittoStartRound3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Round 3 Score Dialog
//--------------------------------------------------------------------------------------------------
bool gt_MakeRound3ScoreDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_allRoundsCompleted == true)) {
        if ((gv_lostUnitsRound3 < gv_lostUnitsRound3Best)) {
            gf_SaveScores();
            if ((gv_lostUnitsRound3 == 0)) {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/7B38A20C"), StringExternal("Param/Value/3E048058"), (StringExternal("Param/Value/C36C687F") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/08307491"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
            else {
                libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/60307E90"), StringExternal("Param/Value/9575DDD6"), (StringExternal("Param/Value/867DDE32") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/E37EF531"), gt_WaitthengobacktoVictoryScreen);
                libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
            }
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/309CA331"), StringExternal("Param/Value/CDEB55C0"), (StringExternal("Param/Value/D1B89877") + IntToText(gv_lostUnitsRound3)), StringExternal("Param/Value/5A036BC0"), gt_WaitthengobacktoVictoryScreen);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    else {
        if ((gv_lostUnitsRound3 == 0)) {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/CD828B84"), StringExternal("Param/Value/85386E77"), (StringExternal("Param/Value/9D8E188C") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
        else {
            libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Success, StringExternal("Param/Value/0C678BD4"), StringExternal("Param/Value/376346CA"), (StringExternal("Param/Value/93DC7389") + IntToText(gv_lostUnitsRound3)), null, gt_WaittogotoVictory);
            libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        }
    }
    gf_Achievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeRound3ScoreDialog_Init () {
    gt_MakeRound3ScoreDialog = TriggerCreate("gt_MakeRound3ScoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait to go to Victory
//--------------------------------------------------------------------------------------------------
bool gt_WaittogotoVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_lostUnitsRound1Best = gv_lostUnitsRound1;
    gv_lostUnitsRound2Best = gv_lostUnitsRound2;
    gv_lostUnitsRound3Best = gv_lostUnitsRound3;
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_FinishVictory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaittogotoVictory_Init () {
    gt_WaittogotoVictory = TriggerCreate("gt_WaittogotoVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wait then go back to Victory Screen
//--------------------------------------------------------------------------------------------------
bool gt_WaitthengobacktoVictoryScreen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_supplyDepotDead == false)) {
        if ((gv_lostUnitsRound1 <= gv_lostUnitsRound1Best)) {
            gv_lostUnitsRound1Best = gv_lostUnitsRound1;
            gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 1)) {
                gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound2 <= gv_lostUnitsRound2Best)) {
            gv_lostUnitsRound2Best = gv_lostUnitsRound2;
            gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 2)) {
                gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
            }
            else {
            }
        }
        if ((gv_lostUnitsRound3 <= gv_lostUnitsRound3Best)) {
            gv_lostUnitsRound3Best = gv_lostUnitsRound3;
            gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
        }
        else {
            if ((gv_allRoundsCompleted == true) && (gv_roundCount == 3)) {
                gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
            }
            else {
            }
        }
    }
    else {
    }
    libChal_gf_ShowHideChallengeWaveSuccessPanel(false);
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitthengobacktoVictoryScreen_Init () {
    gt_WaitthengobacktoVictoryScreen = TriggerCreate("gt_WaitthengobacktoVictoryScreen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Cheating
//--------------------------------------------------------------------------------------------------
bool gt_CheckforCheating_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cheatUsed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckforCheating_Init () {
    gt_CheckforCheating = TriggerCreate("gt_CheckforCheating_Func");
    TriggerAddEventCheatUsed(gt_CheckforCheating, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Ready Button Q
//--------------------------------------------------------------------------------------------------
bool gt_AddReadyButtonQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(gv_pLAYER_USER, RegionPlayableMap());
    gv_revealer = gv_revealer;
    TriggerQueueEnter();
    if ((gv_board == c_boardNone)) {
        BoardDestroy(gv_board);
        libChal_gf_ChallengeScoreWindowwithRounds(StringExternal("Param/Value/B280EC7F"), StringExternal("Param/Value/BDCC67B5"), StringExternal("Param/Value/9DA22040"), StringExternal("Param/Value/69959261"), gv_lostUnitsRound1, gv_lostUnitsRound2, gv_lostUnitsRound3, gf_TotalScore());
        gv_board = BoardLastCreated();
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/41D8632B") + StringExternal("Param/Value/0B90546C") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/564838AB")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/30778FE5") + StringExternal("Param/Value/3785DFC3") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/67EB8B38")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/8D4C9A81") + StringExternal("Param/Value/53A3BA43") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/CAA35349")));
        BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/D5D80022") + StringExternal("Param/Value/131C0309") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/2231D2BE")));
    }
    else {
    }
    if ((gv_roundCount == 0)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/50A9C7CD") + StringExternal("Param/Value/3D4D8B0B") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/E23AB708")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/D87C7FE7") + StringExternal("Param/Value/EB1F74F5") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/07D274BC")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/890CBDC8") + StringExternal("Param/Value/E7B19596") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/2F35D18F")));
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/CFD8DF12") + StringExternal("Param/Value/ADF29692") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/796F57E1")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/0909D6EA") + StringExternal("Param/Value/F63885EC") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/127EC8F7")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/0362E029") + StringExternal("Param/Value/8C51376A") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/B8442722")));
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        BoardItemSetText(gv_board, 1, 1, (StringExternal("Param/Value/C4707565") + StringExternal("Param/Value/8AEE9EC3") + IntToText(gv_lostUnitsRound1) + StringExternal("Param/Value/62C1FE0A")));
        BoardItemSetText(gv_board, 1, 2, (StringExternal("Param/Value/30F3054B") + StringExternal("Param/Value/4ED253F1") + IntToText(gv_lostUnitsRound2) + StringExternal("Param/Value/A74FF9BD")));
        BoardItemSetText(gv_board, 1, 3, (StringExternal("Param/Value/66FB7AEA") + StringExternal("Param/Value/B4D740E9") + IntToText(gv_lostUnitsRound3) + StringExternal("Param/Value/62922DE0")));
    }
    else {
    }
    BoardItemSetText(gv_board, 1, 4, (StringExternal("Param/Value/EC6A4F73") + StringExternal("Param/Value/67231230") + IntToText(gf_TotalScore()) + StringExternal("Param/Value/566CF8A1")));
    libChal_gf_ChallengeReadyButton(gv_readyButton, gv_pLAYER_USER, gt_ReadyPressed);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddReadyButtonQ_Init () {
    gt_AddReadyButtonQ = TriggerCreate("gt_AddReadyButtonQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ReadyPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unusedUnits;
    unitgroup lv_unitsByDepot1;
    unitgroup lv_unitsByDepot2;
    unitgroup lv_unitsByDepot3;

    // Variable Initialization
    lv_unusedUnits = UnitGroupEmpty();
    lv_unitsByDepot1 = UnitGroupEmpty();
    lv_unitsByDepot2 = UnitGroupEmpty();
    lv_unitsByDepot3 = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RegionContainsPoint(RegionFromId(21), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(22), UnitGetPosition(UnitGroupLoopCurrent())) == false) && (RegionContainsPoint(RegionFromId(23), UnitGetPosition(UnitGroupLoopCurrent())) == false)) {
            UnitGroupAdd(lv_unusedUnits, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByDepot1, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByDepot2, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_USER, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_unitsByDepot3, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_unusedUnits, c_unitCountAlive) >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/39CBB209") + StringExternal("Param/Value/2489989B") + IntToText(UnitGroupCount(lv_unusedUnits, c_unitCountAlive)) + StringExternal("Param/Value/EE0BD289") + StringExternal("Param/Value/27DDFA31") + StringExternal("Param/Value/9798D51C")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    if (((UnitGroupCount(lv_unitsByDepot1, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsByDepot2, c_unitCountAlive) == 0) || (UnitGroupCount(lv_unitsByDepot3, c_unitCountAlive) == 0))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/4329A3D4") + StringExternal("Param/Value/80036C3A") + StringExternal("Param/Value/E7E79A44") + StringExternal("Param/Value/4F8444FD")));
        TimerStart(gv_textTimer, 8.0, false, c_timeReal);
        return true;
    }
    else {
    }
    libNtve_gf_HideScreenButton(false, gv_readyButton);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(50), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea1, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("SiegeMode", 0))))) {
            Wait(0.1, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(51), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea2, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("SiegeMode", 0))))) {
            Wait(0.1, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_playerUnits, RegionFromId(49), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_playerUnitsArea3, UnitGroupLoopCurrent());
        while (!((UnitOrder(UnitGroupLoopCurrent(), 0) != Order(AbilityCommand("SiegeMode", 0))))) {
            Wait(0.1, c_timeGame);
        }
    }
    UnitGroupLoopEnd();
    VisRevealerDestroy(gv_revealer);
    gv_ready = true;
    TimerStart(gv_textTimer, 0.0, false, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadyPressed_Init () {
    gt_ReadyPressed = TriggerCreate("gt_ReadyPressed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Text
//--------------------------------------------------------------------------------------------------
bool gt_RemoveText_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveText_Init () {
    gt_RemoveText = TriggerCreate("gt_RemoveText_Func");
    TriggerAddEventTimer(gt_RemoveText, gv_textTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(TextReplaceWord(StringExternal("Param/Value/BABA6EED"), StringExternal("Param/Value/AD04669B"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase), StringExternal("Param/Value/FA4EE24B"), c_objectiveStateActive, true);
    gv_objectiveSurvive01 = ObjectiveLastCreated();
    PingSetVisible(gv_buildingPing01, true);
    PingSetVisible(gv_buildingPing02, true);
    PingSetVisible(gv_buildingPing03, true);
    PingSetVisible(gv_enemyPing01, true);
    PingSetVisible(gv_enemyPing02, true);
    PingSetVisible(gv_enemyPing03, true);
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/C9E0F07E") + gv_ratingTextSilver + StringExternal("Param/Value/8B193142")), StringExternal("Param/Value/FF3A1403"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/24751C21"), StringExternal("Param/Value/CAB13CCB"), IntToText(gv_winningScoreSilver), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive02 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    ObjectiveCreate(TextReplaceWord((StringExternal("Param/Value/69B8B409") + gv_ratingTextGold + StringExternal("Param/Value/DFFC2E41")), StringExternal("Param/Value/F68901EC"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), TextReplaceWord(StringExternal("Param/Value/3D3762C1"), StringExternal("Param/Value/8FB1EBC6"), IntToText(gv_winningScoreGold), c_stringReplaceAll, c_stringCase), c_objectiveStateActive, false);
    gv_objectiveSurvive03 = ObjectiveLastCreated();
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveCreate_Init () {
    gt_ObjectiveSurviveCreate = TriggerCreate("gt_ObjectiveSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(gv_objectiveSurvive01, TextReplaceWord(StringExternal("Param/Value/7B6323B3"), StringExternal("Param/Value/27527C62"), IntToText(gv_roundCount), c_stringReplaceAll, c_stringCase));
    if ((gv_allRoundsCompleted == false)) {
        if ((gv_roundCount == 3)) {
            ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gv_roundCount == 3) && (gf_TotalScore() <= gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateCompleted);
        }
        else {
        }
    }
    else {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
        if ((gf_TotalScore() <= gv_winningScoreSilver)) {
            ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateCompleted);
        }
        else {
        }
        if ((gf_TotalScore() <= gv_winningScoreGold)) {
            ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateCompleted);
        }
        else {
        }
    }
    if ((gf_TotalScore() > gv_winningScoreSilver)) {
        ObjectiveSetState(gv_objectiveSurvive02, c_objectiveStateFailed);
    }
    else {
    }
    if ((gf_TotalScore() > gv_winningScoreGold)) {
        ObjectiveSetState(gv_objectiveSurvive03, c_objectiveStateFailed);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveUpdate_Init () {
    gt_ObjectiveSurviveUpdate = TriggerCreate("gt_ObjectiveSurviveUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Protect
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveProtect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == gv_pLAYER_USER) || (UnitGetOwner(EventUnit()) == gv_pLAYER_COMPUTER1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0)) {
        ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveProtect_Init () {
    gt_ObjectiveSurviveProtect = TriggerCreate("gt_ObjectiveSurviveProtect_Func");
    TriggerEnable(gt_ObjectiveSurviveProtect, false);
    TriggerAddEventUnitDied(gt_ObjectiveSurviveProtect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Discover Q
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveDiscoverQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveSurviveCreate, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveDiscoverQ_Init () {
    gt_ObjectiveSurviveDiscoverQ = TriggerCreate("gt_ObjectiveSurviveDiscoverQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    ObjectiveSetState(gv_objectiveSurvive01, c_objectiveStateCompleted);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveComplete_Init () {
    gt_ObjectiveSurviveComplete = TriggerCreate("gt_ObjectiveSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ObjectiveSurvive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveSurviveCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveSurviveFailed_Init () {
    gt_ObjectiveSurviveFailed = TriggerCreate("gt_ObjectiveSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 1
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 1;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound1ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound1_Init () {
    gt_FinalRound1 = TriggerCreate("gt_FinalRound1_Func");
    TriggerEnable(gt_FinalRound1, false);
    TriggerAddEventUnitDied(gt_FinalRound1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 2
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        gv_roundCount = 2;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound2ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound2_Init () {
    gt_FinalRound2 = TriggerCreate("gt_FinalRound2_Func");
    TriggerEnable(gt_FinalRound2, false);
    TriggerAddEventUnitDied(gt_FinalRound2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Round 3
//--------------------------------------------------------------------------------------------------
bool gt_FinalRound3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gv_attackers, c_unitCountAlive) == 0) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_SupplyDepotsInvulnerable, true, false);
        UnitPauseAll(true);
        Wait(2.0, c_timeGame);
        TriggerEnable(gt_FinishDefeatSupplyDepotBeforeVictory, false);
        gv_roundCount = 3;
        TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_MakeRound3ScoreDialog, true, false);
    }
    else {
    }
    if ((UnitGroupCount(gv_playerUnits, c_unitCountAlive) == 0) && (UnitGetOwner(EventUnit()) == gv_pLAYER_USER)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_FinalRound1, false);
        TriggerEnable(gt_FinalRound2, false);
        TriggerEnable(gt_FinalRound3, false);
        TriggerExecute(gt_FinishDefeatUnitsDead, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalRound3_Init () {
    gt_FinalRound3 = TriggerCreate("gt_FinalRound3_Func");
    TriggerEnable(gt_FinalRound3, false);
    TriggerAddEventUnitDied(gt_FinalRound3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishVictory_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_allRoundsCompleted = true;
    gf_SaveScores();
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveComplete, true, false);
    UISetChallengeCompleted(PlayerGroupSingle(gv_pLAYER_USER), libChal_gf_ChallengeName(libChal_gf_CurrentChallengeType()), true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogScoreShow, true, false);
    TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishVictory_Init () {
    gt_FinishVictory = TriggerCreate("gt_FinishVictory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Supply Depot Before Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatSupplyDepotBeforeVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLowered")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_allRoundsCompleted = false;
    gv_supplyDepotDead = true;
    Wait(2.0, c_timeReal);
    if ((gv_roundCount == 0)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/70CC8205"), StringExternal("Param/Value/4948E809"), StringExternal("Param/Value/C9EF7267"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound01 = (gv_retryCountRound01 + 1);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/C81CB684"), StringExternal("Param/Value/B0B1F247"), StringExternal("Param/Value/B157F46D"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound02 = (gv_retryCountRound02 + 1);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/41D640D0"), StringExternal("Param/Value/2A93656C"), StringExternal("Param/Value/C0EFF997"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
        gv_retryCountRound03 = (gv_retryCountRound03 + 1);
    }
    else {
    }
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatSupplyDepotBeforeVictory_Init () {
    gt_FinishDefeatSupplyDepotBeforeVictory = TriggerCreate("gt_FinishDefeatSupplyDepotBeforeVictory_Func");
    TriggerEnable(gt_FinishDefeatSupplyDepotBeforeVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatSupplyDepotBeforeVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Supply Depot After Victory
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatSupplyDepotAfterVictory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SupplyDepot") || (UnitGetType(EventUnit()) == "SupplyDepotLowered")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FinalRound1, false);
    TriggerEnable(gt_FinalRound2, false);
    TriggerEnable(gt_FinalRound3, false);
    gv_supplyDepotDead = true;
    Wait(2.0, c_timeGame);
    if ((gv_roundCount == 0)) {
        gv_lostUnitsRound1 = gv_lostUnitsRound1Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/192C6495"), StringExternal("Param/Value/8A0CBF46"), StringExternal("Param/Value/AB59B47E"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 1)) {
        gv_lostUnitsRound2 = gv_lostUnitsRound2Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/7D45F9C2"), StringExternal("Param/Value/63183329"), StringExternal("Param/Value/EB7217FC"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    if ((gv_roundCount == 2)) {
        gv_lostUnitsRound3 = gv_lostUnitsRound3Best;
        libChal_gf_CreateChallengeWaveSuccessPanel(libChal_ge_SuccessFailure_Failure, StringExternal("Param/Value/05590318"), StringExternal("Param/Value/146C9CC4"), StringExternal("Param/Value/525D7876"), null, gt_WaitthengobacktoVictoryScreen);
        libChal_gf_ShowHideChallengeWaveSuccessPanel(true);
    }
    else {
    }
    TriggerExecute(gt_ObjectiveSurviveUpdate, true, false);
    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatSupplyDepotAfterVictory_Init () {
    gt_FinishDefeatSupplyDepotAfterVictory = TriggerCreate("gt_FinishDefeatSupplyDepotAfterVictory_Func");
    TriggerEnable(gt_FinishDefeatSupplyDepotAfterVictory, false);
    TriggerAddEventUnitDied(gt_FinishDefeatSupplyDepotAfterVictory, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Defeat Units Dead
//--------------------------------------------------------------------------------------------------
bool gt_FinishDefeatUnitsDead_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    TriggerStop(gt_SpawnRound1);
    TriggerStop(gt_SpawnRound2);
    TriggerStop(gt_SpawnRound3);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRetain);
    Wait(2.0, c_timeReal);
    libChal_gf_DisplayChallengeMessage(PlayerGroupAll(), libChal_ge_CampaignMessageType_ChallengeFailed, StringExternal("Param/Value/BFB48B1F"), libChal_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libChal_gv_challengeObjectiveDelay, c_timeReal);
    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_ObjectiveSurviveFailed, true, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DialogScoreShow, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinishDefeatUnitsDead_Init () {
    gt_FinishDefeatUnitsDead = TriggerCreate("gt_FinishDefeatUnitsDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Counters Q 
//--------------------------------------------------------------------------------------------------
bool gt_TipCountersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C82C41EA"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A16EA607"), StringExternal("Param/Value/4A7610A3"), "Assets\\Textures\\btn-tips-counter.dds");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipCountersQ_Init () {
    gt_TipCountersQ = TriggerCreate("gt_TipCountersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    libNtve_gf_GlobalCinematicSetting(true);
    Wait(0.5, c_timeGame);
    TriggerExecute(gt_ResetPlayField, true, false);
    GameTimeOfDayPause(true);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, false);
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_playerUnitsRound3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_playerUnitsRound1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    gf_SpawnEnemyUnitsForArea1(30, "Zergling", RegionFromId(2));
    gf_SpawnEnemyUnitsForArea2(8, "Baneling", RegionFromId(4));
    gf_SpawnEnemyUnitsForArea3(12, "Mutalisk", RegionFromId(5));
    TriggerExecute(gt_PlayerUnitsRound1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(45), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_introCinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(44), (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00026", -1)) - 0.0), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedAdjutant00026", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedAdjutant00026", 0), 0.0, c_transmissionDurationAdd, true);
    Wait(0.5, c_timeReal);
    TriggerExecute(gt_IntroSupplyDepotCameras, true, false);
    // Transmission - SoundLink("ChallengescombinedAdjutant00027", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedAdjutant00027", 0), 0.0, c_transmissionDurationAdd, true);
    // Transmission - SoundLink("ChallengescombinedAdjutant00028", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedAdjutant00028", 0), 0.0, c_transmissionDurationAdd, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(50), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), SoundLengthSync(SoundLink("ChallengescombinedAdjutant00029", -1)), -1, 10, true);
    // Transmission - SoundLink("ChallengescombinedAdjutant00029", 0)
    libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft), SoundLink("ChallengescombinedAdjutant00029", 0), 0.0, c_transmissionDurationAdd, true);
    gv_introCinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Supply Depot Cameras
//--------------------------------------------------------------------------------------------------
bool gt_IntroSupplyDepotCameras_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_totalDuration;
    fixed lv_timeInterval;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_totalDuration = (SoundLengthSync(SoundLink("ChallengescombinedAdjutant00027", -1)) + SoundLengthSync(SoundLink("ChallengescombinedAdjutant00028", -1)));
    lv_timeInterval = (lv_totalDuration / 3.0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(46), 0.0, -1, 10, true);
    Wait(lv_timeInterval, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(47), 0.0, -1, 10, true);
    Wait(lv_timeInterval, c_timeReal);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(48), 0.0, -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSupplyDepotCameras_Init () {
    gt_IntroSupplyDepotCameras = TriggerCreate("gt_IntroSupplyDepotCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicCompleted == true)) {
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    TriggerStop(gt_IntroSupplyDepotCameras);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_COMPUTER1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_USER, RegionEntireMap(), false, false);
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(28));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(33));
    VisRevealerCreate(gv_pLAYER_USER, RegionFromId(34));
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    libNtve_gf_GlobalCinematicSetting(false);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, 1.0);
    CameraApplyInfo(gv_pLAYER_USER, CameraInfoFromId(49), 1.0, -1, 10, true);
    GameSetSpeedLocked(true);
    GameSetSpeedValue(c_gameSpeedNormal);
    TriggerExecute(gt_StartAI, true, false);
    TriggerExecute(gt_SpawnRound1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Players_Init();
    gt_Init01aTechnology_Init();
    gt_Init02Units_Init();
    gt_Init03Music_Init();
    gt_Init04Environment_Init();
    gt_Init05Hints_Init();
    gt_Init06MapSettings_Init();
    gt_ButtonChosenLeaveGame_Init();
    gt_ButtonChosenRetryRound1_Init();
    gt_ButtonChosenRetryRound2_Init();
    gt_ButtonChosenRetryRound3_Init();
    gt_DialogScoreShow_Init();
    gt_ResetPlayField_Init();
    gt_SpawnRound1_Init();
    gt_SpawnRound2_Init();
    gt_SpawnRound3_Init();
    gt_PlayerUnitsRound1_Init();
    gt_PlayerUnitsRound2_Init();
    gt_PlayerUnitsRound3_Init();
    gt_StartAI_Init();
    gt_WarnPlayerAttack_Init();
    gt_SupplyDepotsInvulnerable_Init();
    gt_SupplyDepotsVulnerable_Init();
    gt_UnitDies_Init();
    gt_MakeRound1ScoreDialog_Init();
    gt_WaittoStartRound2_Init();
    gt_MakeRound2ScoreDialog_Init();
    gt_WaittoStartRound3_Init();
    gt_MakeRound3ScoreDialog_Init();
    gt_WaittogotoVictory_Init();
    gt_WaitthengobacktoVictoryScreen_Init();
    gt_CheckforCheating_Init();
    gt_AddReadyButtonQ_Init();
    gt_ReadyPressed_Init();
    gt_RemoveText_Init();
    gt_ObjectiveSurviveCreate_Init();
    gt_ObjectiveSurviveUpdate_Init();
    gt_ObjectiveSurviveProtect_Init();
    gt_ObjectiveSurviveDiscoverQ_Init();
    gt_ObjectiveSurviveComplete_Init();
    gt_ObjectiveSurviveFailed_Init();
    gt_FinalRound1_Init();
    gt_FinalRound2_Init();
    gt_FinalRound3_Init();
    gt_FinishVictory_Init();
    gt_FinishDefeatSupplyDepotBeforeVictory_Init();
    gt_FinishDefeatSupplyDepotAfterVictory_Init();
    gt_FinishDefeatUnitsDead_Init();
    gt_TipCountersQ_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroSupplyDepotCameras_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
